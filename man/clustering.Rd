% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/clustering.R
\name{clustering}
\alias{clustering}
\title{Clustering samples with controls}
\usage{
clustering(
  simMat_ = NULL,
  controls_ = NULL,
  thresh_ = NULL,
  smpl_graph = TRUE,
  disp_graph = TRUE
)
}
\arguments{
\item{simMat_}{Similarity matrix as a matrix object}

\item{controls_}{Indices of control samples in simMat_ as a string}

\item{thresh_}{Minimum for two samples being considered similar as a numeric (default NULL)}

\item{smpl_graph}{If sample graph must be output (default True)}

\item{disp_graph}{If dispersion graph must be output (default True)}
}
\value{
samples_table: adjacency graph of the similarity matrix after removing insignificant edges given the inferred threshold.
                       Samples are colored by their assigned community (dense region) number.

cliques: cluster of samples

samples_graph: graph of samples colored by community

dispersion_graph: dispersion graph whose edges are colored by increasing similarity (red -> blue)
}
\description{
It needs some samples as controls and returns maximal cliques as clusters and highly interconnected regions as
communities.
}
\details{
COMPARE uses a graphical clustering algorithm in which initially all nodes (samples) are connected forming
a weighted complete graph wherein edges represent the similarity between the nodes. This graph is then pruned to remove
potential false positive edges for a given cutoff inferred from control nodes. The optimal cutoff turns out to be
the minimum weight in the maximum spanning tree of the control nodes. For more information visit \url{https://github.com/morchalabi/COMPARE-suite}.
}
\examples{
require(compaRe)
require(igraph)

# Step 1: Reading in similarity matrix ####

data("compaRe_data")

# Step 2: Clustering ####

out_ = compaRe::clustering(simMat_ = as.matrix(simMat),
                           controls_ = "7,23,30,35,55,106,164,193,214,228,246,254,258,286,343,351,414,444,467,489,540",
                           thresh_ = NULL,
                           smpl_graph = T,
                           disp_graph = T)

# Step 3: Plotting samples graph in current directory as a pdf file ####

# graph atts
g_ = out_$samples_graph
g_$layout = layout_nicely(graph = g_, dim = 3)

# vertex atts
x_rng = range(g_$layout[,1])
y_rng = range(g_$layout[,2])
comms_ = unique(V(g_)$comm)
for(comm_ in comms_)
{
  if(comm_ ==  0) { next() }

  inds_ = which(V(g_)$comm \%in\% comm_)
  if(1 < length(inds_))
  {
    centroid_ = c(sample(seq(x_rng[1],x_rng[2],by = 0.1),1), sample(seq(y_rng[1],y_rng[2],by = 0.1),1))
    anch_angs = seq(0, 2*pi, length.out = length(inds_)+1)
    r_ = 1
    anch_x = r_*cos(anch_angs[-1])+centroid_[1]
    anch_y = r_*sin(anch_angs[-1])+centroid_[2]
    g_$layout[inds_,1] = anch_x
    g_$layout[inds_,2] = anch_y
  }
}
cols_ = colorRampPalette(colors = c('red','green','blue','purple','orange','pink','yellow'))(length(comms_))
V(g_)$color = adjustcolor(col = cols_[V(g_)$comm+1], alpha.f = .7)
V(g_)$color[which(V(g_)$comm \%in\% 0)] = adjustcolor(col = 'grey', alpha.f = .4)
V(g_)$size <- 4
V(g_)$frame.color = NA
V(g_)$label = out_$samples_table[V(g_)$name, 'community']
V(g_)$label[which(V(g_)$label \%in\% 0)] = NA
V(g_)$label.cex = 4
V(g_)$label.font = 2

# edge atts
E(g_)$width = 0.3
E(g_)$color = adjustcolor(col = 'grey', alpha.f = .3)
E(g_)$color[E(g_)$intra_comm] = 'black'

# plotting
pdf(file = 'sample_graph.pdf', width = 70, height = 70)
par(mai = c(0, 0, 0,0))
plot(g_)
graphics.off()

# Step 4: Plotting dispersion graph ####

g_ = out_$dispersion_graph

# vertex atts
if(!is.na(wells_drugs$concentration[1]))      # if there are drug doses
{
 rownames(wells_drugs) = wells_drugs$file
  cntrl_ind = which(V(g_)$name == 'Control')
  V(g_)$label = V(g_)$name
  V(g_)$label[-cntrl_ind] = paste0(wells_drugs[V(g_)$name[-cntrl_ind],"drug"],'_',wells_drugs[V(g_)$name[-cntrl_ind],"concentration"])
}
V(g_)$color = 'grey'
V(g_)$size <- 0.1
V(g_)$frame.color = NA
V(g_)$label.cex = 1
V(g_)$label.font = 2
V(g_)$label.dist = 0.05
V(g_)$label.degree = sample(c(-pi/2,pi/2), length(V(g_)),replace = T)
V(g_)$label.color = adjustcolor(col = 'black', alpha.f = .6)

# edge atts
cols_ = colorRampPalette(colors = c('red', 'blue'))(length(E(g_)))
names(cols_) = sort(E(g_)$weight)     # lower values are assigned to red shades
E(g_)$color = cols_[as.character(E(g_)$weight)]
E(g_)$width = 1
E(g_)$label = round(E(g_)$weight,1)
E(g_)$label.cex = 0.7
E(g_)$label.font = 2
E(g_)$label.color = 'darkgreen'

# plotting
pdf(file = '../out/dispersion_graph.pdf', width = 100, height = 100)
par(mai = c(0, 0, 0,0))
plot(g_, add = F, mark.groups = which(V(g_)$name \%in\% 'Control'), mark.col = 'lightgreen', mark.expand = 1, mark.border = NA, directed = F)
graphics.off()

}
\seealso{
\code{\link{compare}} for measuring spatial similarity between two samples.
}
\author{
Morteza H. Chalabi, \url{mor.chalabi@gmail.com}
}
